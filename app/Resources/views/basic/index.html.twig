{% extends 'base.html.twig' %}

{% block title %}Welcome{% endblock %}

{% block body %}
    <div class="row" id="choose-graph">
        <div class="col-md-12">
            Choose graph
        </div>
    </div>
    <div class="row" id="graph-designer">
        <div class="col-md-12" id="buttons">
            <div class="btn-group" role="group" aria-label="Modify Your Graph">
                <div class="btn btn-success btn-xs" id="AddPoint">Add</div>
                <div class="btn btn-danger btn-xs" id="RemovePoint">Remove</div>
                <div class="btn btn-default btn-xs">Point</div>
            </div>
            <div class="btn-group" role="group" aria-label="Modify Your Graph">
                <div class="btn btn-success btn-xs" id="AddConnection">Add</div>
                <div class="btn btn-danger btn-xs" id="RemoveConnection">Remove</div>
                <div class="btn btn-default btn-xs">Connection</div>
            </div>
        </div>
        <div class="col-md-12" id="canvas-area">
            {# canvas area #}
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
<style type="text/css">
    #choose-graph, #graph-designer {
        display: none;
    }
    #graph-designer #buttons {
        margin-bottom: 5px;
    }
    #graph-designer #canvas-area {
        border: 1px solid #000;
        overflow: hidden;
        padding: 0;
    }
</style>
{% endblock %}

{% block javascripts %}
    <script type="text/javascript" src="javascript/kinetic-v5.1.0.min.js"></script>

    <script type="text/javascript">
        var _Action = new function () {
            this.current = 'none'
            this.availableActions = new Array('none', 'addpoint', 'removepoint');
            this.change = function (action) {
                action = action.toLowerCase();

                if (this.availableActions.indexOf(action) != -1) {
                    var body = $('body');

                    body.removeClass(this.current);
                    if (action != 'none') {
                        body.addClass(action);                        
                    }

                    this.current = action;
                } else {
                    _Action.toDefault();
                    throw 'Action not exists!';
                }
            };
            this.toDefault = function () {
                this.change('none');
            };
            this.currentIs = function (action) {
                return (this.current == action.toLowerCase());
            };
        };
        var _Stage = new function () {
            this.stage = undefined;
            this.create = function () {
                if (typeof this.stage == 'undefined') {
                    this.stage = new Kinetic.Stage({
                        container: 'canvas-area',
                        height: 500,
                        width: 1000
                    });
                } else {
                    throw 'Stage exists!';
                }
            };
            this.getPointsLayer = function () {
                return this.stage
                           .children[1];
            };
            this.refreshPointsLayer = function () {
                this.getPointsLayer()
                    .draw();
            };
            this.add = function (element) {
                return this.stage
                           .add(element);
            };
            this.draw = function () {
                return this.stage
                           .draw();
            };
        };
        var _Points = new function (points) {
            this.points = new Array();
            this.count = 0;
            this.getPoint = function(n) {
                if (this.count == 0) {
                    throw 'Points array is clear!';
                } else {
                    if ((n < this.count) && (n >= 0)) {
                        return this.points[n];
                    } else {
                        throw 'Point not exists!';
                    }
                }
            };
            this.eachOne = function (func) {
                if (this.count > 0) {
                    for (var a = 0; a < this.count; a++) {
                        func(this.points[a]);
                    }
                }
            };
            this.check = function (x, y) {
                if (this.count > 0) {
                    for (var a = 0; a < this.count; a++) {
                        if ((this.points[a].getX() == x) && (this.points[a].getY() == y)) {
                            return false;
                        }
                    }

                    return true;
                } else {
                    return true;
                }
            };
            this.add = function (x, y) {
                if (this.check(x, y)) {
                    var point = new Kinetic.Circle({
                        fill: '#fff',
                        radius: 6,
                        stroke: '#000',
                        strokeWidth: 1,
                        x: x,
                        y: y
                    });

                    point.on('click', function () {
                        if (_Action.currentIs('removepoint')) {
                            _Points.remove(this.getX(), this.getY());

                            this.remove();

                            _Stage.refreshPointsLayer();
                        }
                    });

                    this.points
                        .push(point);
                    this.count++;

                    _Stage.getPointsLayer()
                          .add(point)
                          .draw();
                } else {
                    alert('Point on position (' + x + ', ' + y + ') exists!');
                }
            };
            this.remove = function (x, y) {
                if (this.count > 0) {
                    for (var a = 0; a < this.count; a++) {
                        if ((this.points[a].getX() == x) && (this.points[a].getY() == y)) {
                            delete this.points[a];

                            _Points.points = _Points.points.slice(0, a)
                                                    .concat(_Points.points
                                                                   .slice(a + 1));

                            _Points.count--;
                        }
                    }
                }
            };
        };
        //var _Labels = new Array();

        function loadGraphsData()
        {
            _Stage.create();

            var baseLayer = new Kinetic.Layer();
            _Stage.add(baseLayer);

            var pointsLayer = new Kinetic.Layer();

            _Points.eachOne(function (point) {
                pointsLayer.add(_Points[a]);
            });

            _Stage.add(pointsLayer)
                  .draw();
        }

        $(document).ready(function () {
            if ($('#graphs-list .list-group-item.active').length == 0) {
                $('#choose-graph').css('display', 'block');
            } else {
                $('#graph-designer').css('display', 'block');
            }

            loadGraphsData();

            $('div#buttons div.btn-group div').on('click', function () {
                _Action.change($(this).attr('id'));
            });

            $('div#canvas-area').on('contextmenu', function () {
                _Action.toDefault();
                return false;
            })
            .on('click', function (event) {
                if (_Action.currentIs('addpoint')) {
                    _Points.add(event.offsetX, event.offsetY);
                }
            });
        });
    </script>
{% endblock %}
